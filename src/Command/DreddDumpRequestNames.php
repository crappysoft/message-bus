<?php
declare(strict_types = 1);

namespace App\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;

/**
 * @author Dmitry Bykov <dmitry.bykov@sibers.com>
 */
final class DreddDumpRequestNames extends Command
{
    protected static $defaultName = 'dredd:request-names:dump';

    /**
     * {@inheritDoc}
     */
    protected function configure()
    {
        $this->setDescription('Dumps request names as constants');
    }

    /**
     * {@inheritDoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $path      = __DIR__ . '/../../tests/Dredd/Names.php';
        $className = 'Names';
        $namespace = "Dredd";

        $process = new Process(['npx', 'dredd', '--names', '--no-color']);
        try {
            $process->mustRun();

            $result = $process->getOutput();
            $constants = $this->parseNames($result);
            $this->dumpNames($constants, $path, $namespace, $className);
            $output->writeln('Names were dumped to: ' . $path);
        } catch (ProcessFailedException $exception) {
            $output->writeln($exception->getMessage());
        }
    }

    /**
     * @param string $result
     *
     * @return array
     */
    private function parseNames(string $result): array
    {
        $pattern = '/^info: (.*?)$/mi';
        $matches = [];
        preg_match_all($pattern, $result, $matches);

        $constants = [];
        foreach ($matches[1] as $match) {
            $parts = explode(" > ", $match);

            if (!in_array($parts[2], ['GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'OPTION'])) {
                $parts[2] = '';
            } else {
                $parts[2] = '_' . $parts[2];
            }

            $constantName = strtoupper(trim(preg_replace('/[^a-zA-Z0-9]/', '_', substr($parts[1], 4) . $parts[2]), '_') . '_' . $parts[3]);
            $constants[$constantName] = $match;
        }

        return $constants;
    }

    /**
     * @param array  $constants
     * @param string $path
     * @param string $namespace
     * @param string $className
     */
    private function dumpNames(array $constants, string $path, string $namespace, string $className): void
    {
        $classTpl = <<<'TPL'
<?php
declare(strict_types = 1);

namespace %s;

/**
 * This class is autogenerated. DO NOT MODIFY
 */
final class %s
{
%s
}
TPL;

        $body = [];
        foreach ($constants as $name => $value) {
            $body[] = sprintf('    const %s = "%s";', $name, $value);
        }

        $content = sprintf($classTpl, $namespace, $className, implode("\n", $body));
        file_put_contents($path, $content);
    }
}
