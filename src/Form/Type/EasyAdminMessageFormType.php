<?php
declare(strict_types = 1);

namespace App\Form\Type;

use App\Form\DataMapper\SerializerDataMapper;
use EasyCorp\Bundle\EasyAdminBundle\Form\Util\FormTypeHelper;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Serializer\Serializer;

/**
 * @author Dmitry Bykov <dmitry.bykov@sibers.com>
 */
final class EasyAdminMessageFormType extends AbstractType
{
    /**
     * @var Serializer
     */
    private $serializer;
    /**
     * @var array
     */
    private $configurators;

    /**
     * @param Serializer $serializer
     * @param array      $configurators
     */
    public function __construct(Serializer $serializer, array $configurators = [])
    {
        $this->serializer = $serializer;
        $this->configurators = $configurators;
    }

    /**
     * {@inheritDoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $dataClass = $options['data_class'];

        if (empty($options['fields'])) {
            $data = new $dataClass();
            $normalizedData = $this->serializer->normalize($data);

            if (!is_array($normalizedData)) {
                throw new \RuntimeException('Something went wrong during normalization');
            }

            foreach (array_keys($normalizedData) as $name) {
                $builder->add($name);
            }
        } else {
            foreach ($options['fields'] as $field) {
                if (!is_array($field)) {
                    $builder->add($field);
                    continue ;
                }

                $name = $field['property'] ?? '_easyadmin_form_design_element_0';
                if (isset($field['type']) && 'string' === $field['type']) {
                    $field['type'] = 'text';
                }


                $type = isset($field['type']) ? FormTypeHelper::getTypeClass($field['type']) : null;


                $formFieldOptions = $field['type_options'] ?? [];
                $formFieldOptions['translation_domain'] = 'messages';

                foreach ($this->configurators as $configurator) {
                    if ($configurator->supports($type, $formFieldOptions, $field)) {
                        $formFieldOptions = $configurator->configure($name, $formFieldOptions, $field, $builder);
                    }
                }

                if (!isset($field['property'])) {
                    $formFieldOptions['mapped'] = false;
                    $formFieldOptions['required'] = false;
//                    die(var_dump($formFieldOptions));

                }


                $builder->add($name, $type, $formFieldOptions);
            }
        }

        $builder->setDataMapper(new SerializerDataMapper($this->serializer, $dataClass));
    }

    /**
     * {@inheritdoc}
     */
    public function finishView(FormView $view, FormInterface $form, array $options)
    {
        $view->vars['easyadmin_form_tabs'] = [];
        $view->vars['easyadmin_form_groups'] = [];
    }

    /**
     * @inheritDoc
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            'fields' => [],
        ]);
        parent::configureOptions($resolver); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function getBlockPrefix()
    {
        return 'easyadmin';
    }

}
